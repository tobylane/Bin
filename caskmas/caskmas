#!/usr/bin/env bash
# Copyright 2019- tobylane. Licensed under the MIT licence found in LICENSE.txt or online
# Find apps that could be replaced by versions from Homebrew cask or Mac Apple Store
# For easier updating, not relying on internal Sparkle, etc
# Search through folders (eg Applications), find apps, check they aren't from Apple, cask or mas
# Use userignores for an external list of apps to ignore
# Prefers Homebrew over Mac Apple Store for price, accuracy and information
# Requires https://github.com/mas-cli/mas https://github.com/ali-rantakari/trash, brew install mas trash
# Todo: Make quieter, increase accuracy, ignore steam/epic/etc, false negatives (eg Alfred 4, Github Desktop)
set -eao pipefail
shopt -s nocasematch # Case insensitive comparisons

# Apps you don't want updated
ignore=("App One" "Second special app" "Steam" "CorsixTH" "AnimView" "Alfred 4" "Dropbox" "${userignores[@]}")
# Apple apps from system updates
apple=("App Store" "Automator" "Calculator" "Calendar" "Chess" "Contacts" "DVD Player" "Dashboard"
 "Dictionary" "FaceTime" "Font Book" "GarageBand" "iBooks" "Image Capture" "iTunes" "iPhoto" "Launchpad"
 "Mail" "Maps" "Messages" "Mission Control" "Notes" "Photo Booth" "Photos" "Preview" "QuickTime Player"
 "Reminders" "Safari" "Siri" "Stickies" "System Preferences" "TextEdit" "Time Machine" "Xcode")

elementIn () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

brew update

if [ ! -r "Brewfile" ]; # Avoid destroying a foreign or old brewfile, eg relating to a repository
  then trap trash "$PWD/Brewfile" EXIT
  brew bundle dump --force
fi
IFS=$'\n' read -r -d '' -a brewlist < <(grep Brewfile -e '^cask' | cut -d\" -f2 && printf '\0')
IFS=$'\n' read -r -d '' -a mas < <(grep Brewfile -e '^mas' | cut -d\" -f2 && printf '\0')

if [ -d "$1" ]; then cd="$1"; shift
elif ls ./*.app >/dev/null 2>&1; then cd="$PWD"
else cd="/Applications"
fi
cd "$cd" || exit; echo Running in "$cd"

for app in *.app; do
  echo --
  name="${app:0:${#app}-4}"; brew="${name// /-}"
  if elementIn "$name" "${ignore[@]}" || elementIn "$name" "${apple[@]}"; then echo Ignoring: "$name"
  elif elementIn "$name" "${mas[@]}"; then echo Already installed by mas: "$name"
  elif elementIn "$brew" "${brewlist[@]}"; then echo Already installed by brew: "$name"
  else
    if [[ "$(mdls -name kMDItemVersion "$app")" == *null* ]]
      then echo "$name" "Unknown Version"
    else echo "$name" "$(mdls -name kMDItemVersion "$app" | cut -d\" -f2)"
    fi
    if brew cask info "$brew" >/dev/null 2>&1; then
      if [ "$1" = "install" ]; then
        brew cask install "$brew" && if [ "$PWD" != "/Applications" ]; then trash "$app"; fi
      else
        brew cask info "$brew" | sed -n -e '1,2p'
      fi
    elif mas search "$name" >/dev/null 2>&1; then
      if mas info "$(mas search "$name" | head -n1 | sed 's/^ *//g' | cut -d' ' -f1)" | head -n2 \
        && [ "$1" = "install" ]; then
        echo -e "Use \e[3mmas lucky \"$name\"\e[0m if this is a match" # mas results are unreliable, do this manually
      fi
    else echo Not available; if [ "$1" = "list" ]; then list="$list $name,"; fi
    fi
  fi
done 
if [ "$1" = "list" ] && [ -n "$list" ]; then echo --; echo "$list"; fi
